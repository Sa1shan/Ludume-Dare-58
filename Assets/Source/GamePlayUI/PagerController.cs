using UnityEngine;
using System.Collections.Generic;
using TMPro;
using UnityEngine.UI;
using DG.Tweening;

namespace Source.GamePlayUI
{
    public class PagerController : MonoBehaviour
    { 
        [Header("Player")]
        [SerializeField] private GameObject player;
        
        [Header("Pager –∏ —Ç–µ–∫—Å—Ç")]
        [SerializeField] private RectTransform pager;
        [SerializeField] private TextMeshProUGUI tmPro;
        [TextArea(5, 15)]
        [SerializeField] private string notification;
        [SerializeField] private TextMeshProUGUI notificationTmPro;

        [TextArea(5, 15)]
        [SerializeField] private List<string> pages = new List<string>();

        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")]
        [SerializeField] private float animationSpeed;
        [SerializeField] private float notificationAnimSpeed;

        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ Pager")]
        [SerializeField] private Vector2 startPosition;
        [SerializeField] private Vector2 endPosition;
        [SerializeField] private float pagerAnimationDuration;
        [SerializeField] private float pagerAnimationDelay;

        private int _currentPageIndex = 0;
        private bool _isAnimatingText = false;
        private int _currentIndex = 0;
        private Vector3 _playerStartPosition;


        void Start()
        {
            pager.gameObject.SetActive(false);
            notificationTmPro.gameObject.SetActive(false);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –Ω—É–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (pages.Count > 0)
            {
                tmPro.text = pages[0];
            }
            _playerStartPosition = player.transform.position;
        }

        void Update()
        {
            if (Input.GetKeyDown(KeyCode.C))
            {
                if (!pager.gameObject.activeSelf)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Pager
                    pager.gameObject.SetActive(true);
                    pager.anchoredPosition = startPosition;
                    AnimatePager(true); // true ‚Äî –≤—ã–ª–µ—Ç
                }
                else
                {
                    // –°–∫—Ä—ã–≤–∞–µ–º Pager
                    AnimatePager(false); // false ‚Äî –≤–æ–∑–≤—Ä–∞—Ç
                    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:
                    // NextMessage();
                }
                notificationTmPro.gameObject.SetActive(false);
            }

            // if (Input.GetKeyDown(KeyCode.N))
            // {
            //     Notificaion();
            // }
            notificationTmPro.text = notification;
        }

        private void PlayerMoving()
        {
            if (player.transform.position != _playerStartPosition)
            {
                AnimatePager(false);
            }
        }

        private void AnimatePager(bool isEntering)
        {
            Vector2 targetPos = isEntering ? endPosition : startPosition;

            // –ü–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ –æ—á–∏—â–∞–µ–º TMP, –µ—Å–ª–∏ Pager –ø–æ—è–≤–ª—è–µ—Ç—Å—è
            if (isEntering && tmPro != null)
            {
                tmPro.text = "";
            }

            pager.DOAnchorPos(targetPos, pagerAnimationDuration)
                .SetDelay(pagerAnimationDelay)
                .SetEase(Ease.OutCubic)
                .OnComplete(() =>
                {
                    if (!isEntering)
                    {
                        pager.gameObject.SetActive(false);
                    }
                    else
                    {
                        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ Pager –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        ShowMessage(_currentPageIndex);
                    }
                });
        }

        private void ShowMessage(int index)
        {
            if (index < 0 || index >= pages.Count) return;

            AnimateText(tmPro, pages[index]);
        }

        private void AnimateText(TextMeshProUGUI textTMP, string text)
        {
            if (textTMP == null) return;

            _isAnimatingText = true;
            textTMP.text = "";

            float delay = pagerAnimationDelay; // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ delay –¥–ª—è —Ç–µ–∫—Å—Ç–∞

            for (int i = 0; i < text.Length; i++)
            {
                char c = text[i];

                DOVirtual.DelayedCall(delay, () =>
                {
                    textTMP.text += c;
                });

                if (c != ' ')
                {
                    delay += animationSpeed;
                }
            }

            DOVirtual.DelayedCall(delay, () => { _isAnimatingText = false; });
        }

        public void Notificaion()
        {
            notificationTmPro.gameObject.SetActive(true);
            notificationTmPro.DOFade(1f,notificationAnimSpeed);
        }

        private void NextMessage()
        {
            // üîπ –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é

            // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π
            // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—Å—Ç—å ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
            if (_currentPageIndex < pages.Count - 1)
            {
                _currentPageIndex++;

                // 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
                tmPro.text = "";

                // 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                ShowMessage(_currentPageIndex);
            }
        }
    }
}
