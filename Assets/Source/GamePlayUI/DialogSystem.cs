using System.Collections.Generic;
using DG.Tweening;
using TMPro;
using UnityEngine;

namespace Source.GamePlayUI
{
    [System.Serializable]
    public class DialogLine
    {
        public string name;                         // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        [TextArea(5, 15)] public string text;       // –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    }

    public class DialogSystem : MonoBehaviour
    {
        [Header("–ü—Ä–∏–≤—è–∑–∫–∏ –∫ TextMeshProUGUI")]
        [SerializeField] private TextMeshProUGUI tmp1;      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        [SerializeField] private TextMeshProUGUI nameTmp1;  // –î–ª—è –∏–º–µ–Ω

        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏")]
        [SerializeField] private float animationSpeed = 0.05f; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏

        [Header("–î–∏–∞–ª–æ–≥–∏")]
        [SerializeField] private List<DialogLine> dialogLines = new List<DialogLine>();

        private int currentIndex = 0;      // —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–∞—Ä—ã
        private bool isAnimating = false;  // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –õ–ö–ú

        private void Start()
        {
            tmp1.text = "";
            nameTmp1.text = "";
        }

        private void Update()
        {
            if (Input.GetMouseButtonDown(0) && !isAnimating)
            {
                ShowNextPair();
            }
        }

        private void ShowNextPair()
        {
            if (currentIndex >= dialogLines.Count)
            {
                OnDialogEnd();
                return;
            }

            DialogLine line = dialogLines[currentIndex];

            // –∏–º—è —Å—Ä–∞–∑—É –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º
            nameTmp1.text = line.name;

            // —Ç–µ–∫—Å—Ç –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –ø–æ –±—É–∫–≤–∞–º
            AnimateText(tmp1, line.text);
            currentIndex++;
        }

        private void AnimateText(TextMeshProUGUI textTMP, string text)
        {
            if (textTMP == null) return;

            isAnimating = true;
            textTMP.text = "";

            float delay = 0f;

            for (int i = 0; i < text.Length; i++)
            {
                char c = text[i];

                DOVirtual.DelayedCall(delay, () =>
                {
                    textTMP.text += c;
                });

                // –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –ø—Ä–æ–±–µ–ª
                if (c != ' ')
                {
                    delay += animationSpeed;
                }
            }

            // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –õ–ö–ú
            DOVirtual.DelayedCall(delay, () =>
            {
                isAnimating = false;
            });
        }


        private void OnDialogEnd()
        {
            // üîπ –ó–¥–µ—Å—å —Ç—ã —Å–∞–º —Ä–µ–∞–ª–∏–∑—É–µ—à—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        }
    }
}
